
/
 * Filename: README
 * Author: Esther Park
 * Userid: cs30s121be
 * Date: 07/02/2021
 * Sources of help: none
 */

Description
____________
This program reads in email data files and checks the emails to see if they are in a list of spam addresses. This program hashes email data into a hashtable. The user will enter email addresses to check if they are spam by looking through the hashtable.

How to compile
____________
To compile the program, navigate to the directory containing the source files for PA1, in this case `pa1`. This directory should contain the Makefile. Type `make`, and the program should compile.

How to run the program
____________
This program takes 1-2 arguments. To run the program, type the executable name with either the `-h` flag or the `-i` flag followed by the directory containing emails that the user wants to check against the spam emails. For example:
	./spamFilter -i ~/../public/emails/emails_100
	./spamFilter -h

Example of normal output
____________
Normal output is printed to stdout. Normal output can take either one or two arguments. With two arguments, normal output can look like:

cs30s121be@pi-cluster-111:~/pa1$ ./spamFilter -i ~/../public/emails/emails_100
Enter a word:

With one argument, normal output looks like:

cs30s121be@pi-cluster-111:~/pa1$ ./spamFilter -h

Usage: ./spamFilter {-i dataFile | -h}
    -i dataFile -- The file containing the data
    -h          -- Displays this long usage message


Example of abnormal output
____________
Abnormal output is printed to stderr. This can occur if no or too many arguments are given. This can look like:

cs30s121be@pi-cluster-111:~/pa1$ ./spamFilter
Incorrect number of args.

Usage: ./spamFilter {-i dataFile | -h}

cs30s121be@pi-cluster-111:~/pa1$ ./spamFilter -i ~/../public/emails/emails_10 ~/../public/emails/emails_1000
Incorrect number of args.

Usage: ./spamFilter {-i dataFile | -h}


Testing
____________
This program was tested by using the provided executable pa1testspamFilter file. Both this file and spamFilter were executed with the same inputs, with their outputs being redirected to two different files, titled myOutfile and refOutfile. The outputs of both programs were compared using the `diff` command. If this command gave no outputs, it meant that there were no differences between the two program outputs.

The two program inputs were tested with:
	- Too few and too many arguments in the command line
	- The correct number of arguments, but incorrect infile name
	- A smaller and larger default size than the provided size of 2003

Additionally, the hash(), populateTable(), and prependNode() functions were each unit tested in the respective testhash.c, testpopulateTable.c, and testprependNode.c files. These functions were tested to ensure that they performed accordingly.

Questions
____________

1. You realized you made a spelling error when using one of the constants from the pa1.h file. Instead of DEFAULT_SIZE, you've been typing DEFAUL_SIZE (without the T). How would you find and replace all occurrences of DEFAUL_SIZE in your file to be DEFAULT_SIZE?
The following command inside the file must be in normal mode, utilizing the :s, or substitute command. The command is: ':s/DEFAUL_SIZE/DEFAULT_SIZE/g'. This command searches all occurrences of the string 'DEFAUL_SIZE' and replaces each with 'DEFAULT_SIZE'. The `g` flag is how we are able to find/replace all occurrences.

2. What Git command(s) would you use to list files with changes since the last commit?
The git command to list files with changes since the last commit is `git diff --name-only`. This lists the names of files that have been changed since the last commit. These files have not been staged or prepared for a commit.

3. What Git command would you use to undo a bad commit that has been already pushed?
The git command to undo a bad commit that has already been pushed is `git revert`. This command essentially reverses the effects of the existing bad commit. There are options for the command in which the user can edit the commit message before reverting, revert a branch merge commit, etc. 

4. What Git command would you use to see the history of all your commits?
The command to see my commit history is 'git log'. This command shows all the commits that have been made in the git repository.

5. You finished the PA since you started early, but your friend hasn't and just started working on it even though it's due tonight at 11:59 pm. Your friend knows you are done with the PA and has asked you to help them so they can finish in time. What do you do to act with integrity?
To act with integrity, I cannot show any of my code to my friend or look at their code. I can discuss with my friend while they don't take notes, and make sure that they start coding an hour after our discussion.

